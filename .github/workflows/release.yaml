name: Release

on:
  push:
    tags:
      - '*'

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version_tag: ${{ steps.get_version.outputs.VERSION_TAG }}
      major: ${{ steps.get_version.outputs.MAJOR }}
      minor: ${{ steps.get_version.outputs.MINOR }}
      patch: ${{ steps.get_version.outputs.PATCH }}
      pre_release: ${{ steps.get_version.outputs.PRE_RELEASE }}
    steps:
      - name: Get the version
        id: get_version
        run: |
          VERSION_TAG=$(echo $GITHUB_REF | sed -e "s/refs\/tags\///")
          if [[ -z "$VERSION_TAG" ]]; then
            VERSION_TAG="v0.0.0-development.0"
          fi
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "::set-output name=VERSION_TAG::$VERSION_TAG"
          
          # Remove the 'v' prefix
          version=${VERSION_TAG:1}

          # Split into main version and pre-release parts
          IFS='-' read -r main_version pre_release <<< "$version"

          # Split main version into major, minor, and patch versions
          IFS='.' read -r major minor patch <<< "$main_version"
          
          MAJOR="${major}"
          MINOR="${minor}"
          PATCH="${patch}"
          PRE_RELEASE="${pre_release}"
          
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          echo "PRE_RELEASE=$PRE_RELEASE" >> $GITHUB_ENV

          echo "::set-output name=MAJOR::$MAJOR"
          echo "::set-output name=MINOR::$MINOR"
          echo "::set-output name=PATCH::$PATCH"
          echo "::set-output name=PRE_RELEASE::$PRE_RELEASE"

  build:
    if: startsWith(github.ref, 'refs/tags/')
    needs: version
    runs-on: ${{ matrix.os }}
    env:
      _VCPKG_: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg/bincache
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13]

    steps:
    - uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15"
        env: true

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.28.1
        ninjaVersion: 1.11.1

    - name: run-vcpkg
      uses: lukka/run-vcpkg@v11.5

    - name: Install dependencies
      run: vcpkg install

    - name: Set CPACK_GENERATOR
      run: |
        if [[ "${{ matrix.os }}" == ubuntu* ]]; then
          echo "CPACK_GENERATOR=DEB;TGZ" >> $GITHUB_ENV
        else
          echo "CPACK_GENERATOR=DragNDrop;TGZ" >> $GITHUB_ENV
        fi

    - name: Configure ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake \
          --toolchain=${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake \
          -DCPACK_PACKAGE_VERSION_MAJOR=${{ needs.version.outputs.major }} \
          -DCPACK_PACKAGE_VERSION_MINOR=${{ needs.version.outputs.minor }} \
          -DCPACK_PACKAGE_VERSION_PATCH=${{ needs.version.outputs.patch }} \
          -DVERSION_TAG=${{ needs.version.outputs.version_tag }} \
          -DCPACK_GENERATOR=${CPACK_GENERATOR} \
          -B build .
        
    - name: Build ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake --build build

    - name: Test ${{ matrix.os }}/${{ matrix.type }}
      run: SDL_AUDIODRIVER=dummy SDL_VIDEODRIVER=dummy cmake --build build --target test

    - name: Package ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake --build build --target package

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/latebit-*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.version.outputs.version }}
        fail_on_unmatched_files: false
  
  wasm:
    if: startsWith(github.ref, 'refs/tags/')
    needs: version
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "15"
        env: true

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.28.1
        ninjaVersion: 1.11.1

    - name: Setup emsdk
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 3.1.51
        actions-cache-folder: 'emsdk-cache'

    - name: Configure wasm
      run: |
        emmake cmake \
          -DWASM=1 \
          -DCPACK_PACKAGE_VERSION_MAJOR=${{ needs.version.outputs.major }} \
          -DCPACK_PACKAGE_VERSION_MINOR=${{ needs.version.outputs.minor }} \
          -DCPACK_PACKAGE_VERSION_PATCH=${{ needs.version.outputs.patch }} \
          -DVERSION_TAG=${{ needs.version.outputs.version_tag }} \
          -DCPACK_GENERATOR=TGZ \
          -B build .
        
    - name: Build wasm
      run: |
        emmake cmake --build build

    - name: Package wasm
      run: |
        emmake cmake --build build --target package

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/latebit-*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.version.outputs.version }}
        fail_on_unmatched_files: false
