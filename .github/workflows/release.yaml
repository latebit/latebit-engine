name: Release

on:
  create:
    types: [tag]

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      major: ${{ steps.get_version.outputs.MAJOR }}
      minor: ${{ steps.get_version.outputs.MINOR }}
      patch: ${{ steps.get_version.outputs.PATCH }}
    steps:
      - name: Get the version
        id: get_version
        run: |
          VERSION=$(echo $GITHUB_REF | sed -e "s/refs\/tags\///")
          if [[ -z "$VERSION" ]]; then
            VERSION="v0.0.0-development"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=VERSION::$VERSION"
          # Split the version string into major, minor, and patch components
          IFS='.' read -ra VERSION_PARTS <<< "${VERSION#v}"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          echo "MAJOR=$MAJOR" >> $GITHUB_ENV
          echo "MINOR=$MINOR" >> $GITHUB_ENV
          echo "PATCH=$PATCH" >> $GITHUB_ENV
          echo "::set-output name=MAJOR::$MAJOR"
          echo "::set-output name=MINOR::$MINOR"
          echo "::set-output name=PATCH::$PATCH"

  build:
    if: startsWith(github.ref, 'refs/tags/')
    needs: version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13]
        type: [native]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ./vcpkg
          ~/vcpkg
          ~/cmake
          ./build/vcpkg_installed
          /usr/lib/llvm-15
          ${{ env.HOME }}/.cache/vcpkg/archives
          ${{ env.XDG_CACHE_HOME }}/vcpkg/archives
          ${{ env.LOCALAPPDATA }}\vcpkg\archives
          ${{ env.APPDATA }}\vcpkg\archives
          "**/cpm_modules"
        key: ${{ runner.os }}-${{ matrix.type }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('./vcpkg.json')}}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.type }}-

    - name: Version
      run: echo "${{ needs.version.outputs.version }}"

    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-15.0.3
        cmake: 3.28.1
        vcpkg: true

    - name: Set CPACK_GENERATOR
      run: |
        if [[ "${{ matrix.os }}" == ubuntu* ]]; then
          echo "CPACK_GENERATOR=DEB;TGZ" >> $GITHUB_ENV
        else
          echo "CPACK_GENERATOR=DragNDrop;TGZ" >> $GITHUB_ENV
        fi

    - name: Configure ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake \
          --toolchain=~/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DCPACK_PACKAGE_VERSION_MAJOR=${{ needs.version.outputs.major }} \
          -DCPACK_PACKAGE_VERSION_MINOR=${{ needs.version.outputs.minor }} \
          -DCPACK_PACKAGE_VERSION_PATCH=${{ needs.version.outputs.patch }} \
          -DCPACK_GENERATOR=${CPACK_GENERATOR} \
          -B build .
        
    - name: Build ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake --build build

    - name: Lint ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake --build build --target format
        cmake --build build --target tidy

    - name: Test ${{ matrix.os }}/${{ matrix.type }}
      run: SDL_AUDIODRIVER=dummy SDL_VIDEODRIVER=dummy cmake --build build --target test

    - name: Package ${{ matrix.os }}/${{ matrix.type }}
      run: |
        cmake --build build --target package

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/latebit-*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.version.outputs.version }}
        fail_on_unmatched_files: false
  
  wasm:
    if: startsWith(github.ref, 'refs/tags/')
    needs: version
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/cmake
          /usr/lib/llvm-15
          "**/cpm_modules"
        key: ${{ runner.os }}-wasm
        restore-keys: |
          ${{ runner.os }}-wasm
    
    - name: Setup Cpp
      uses: aminya/setup-cpp@v1
      with:
        compiler: llvm-15.0.3
        cmake: 3.28.1

    - name: Setup emsdk
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 3.1.51
        actions-cache-folder: 'emsdk-cache'

    - name: Configure wasm
      run: |
        emmake cmake \
          -DWASM=1 \
          -DCPACK_PACKAGE_VERSION_MAJOR=${{ needs.version.outputs.major }} \
          -DCPACK_PACKAGE_VERSION_MINOR=${{ needs.version.outputs.minor }} \
          -DCPACK_PACKAGE_VERSION_PATCH=${{ needs.version.outputs.patch }} \
          -DCPACK_PACKAGE_FILE_NAME=latebit-${{ needs.version.outputs.version }}-wasm \
          -DCPACK_GENERATOR=ZIP \
          -B build .
        
    - name: Build wasm
      run: |
        emmake cmake --build build

    - name: Package wasm
      run: |
        emmake cmake --build build --target package

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: build/latebit-*
        token: ${{ secrets.GITHUB_TOKEN }}
        tag_name: ${{ needs.version.outputs.version }}
        fail_on_unmatched_files: false